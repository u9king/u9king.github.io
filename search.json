[{"title":"Brick Breaker","date":"2024-01-10T11:40:56.000Z","url":"/2024/01/10/Brick%20Breaker/","tags":[["Unity","/tags/Unity/"]],"categories":[["Games","/categories/Games/"]],"content":"Brick Breaker1. 游戏背景​ 打砖块” Brick Breaker” 游戏诞生于1976年，初版 “Breakout”由Atari公司制作，是一款经典的电子游戏，由于其玩法简单：这款游戏因其简单直观的玩法和持久的挑战性而备受欢迎。 2. 游戏内容 3. 核心机制​ 玩家操控一个滑板接住反弹的球，而屏幕上方有一堵由砖块组成的墙。玩家的目标是用球击中墙上的砖块，每次击中一个砖块，就会让它消失，直到整堵墙都被击破。游戏的难度会随着关卡的进行而增加，砖块的排列和形状也会变得更加复杂。 ​ 游戏中会出现一些特殊砖块，给予玩家额外的分数、增加滑板的宽度、减缓球的速度等。 演示视频 4. 基本组件 Physics 物理材质 Prefabs 预制体 Scenes 场景 Scripts C#脚本 Sprite 精灵（图片） 5.设计和编码GameManager的Coding，其中包括游戏分数，存活次数，游戏胜负的判定，还包括加载场景，重置物体等代码内容。 "},{"title":"John Lemon's Haunted Jaunt","date":"2024-01-10T11:40:56.000Z","url":"/2024/01/10/John%20Lemon's%20Haunted%20Jaunt/","tags":[["Unity","/tags/Unity/"]],"categories":[["Games","/categories/Games/"]],"content":"John Lemon’s Haunted Jaunt1. 游戏背景​ John Lemon 的 Haunted Jaunt3D潜行游戏，玩家扮演John Lemon是一名冒险者。有一天，他接到了一家调查机构的委托，任务是前往一个废弃的城堡大厅，调查那里关于一个失踪家族的传说。 ​ 这个城堡曾是一个富裕且神秘的家族的住所，直到某天，家族成员在进行一场神秘的仪式时突然失踪。传说他们的灵魂被困在城堡中，而城堡因此受到了诅咒。约翰·莱蒙的任务是解开这个家族的神秘和庄园的诅咒，带着冒险的心情，他踏上了这次 “鬼魂之旅”。 ​ 进入城堡大厅后，约翰发现这里的环境异常阴森，大厅内散发着陈旧的气息，家具散乱，墙壁上的画作变得模糊而诡异。在石像的激光扫射和鬼的探测下，约翰必须小心翼翼地穿越大厅，寻找隐藏的谜团，解开庄园的秘密。 ​ 约翰知道，一旦他能够成功抵达大厅中的最终安全区域，就能解除这个家族的诅咒，让失踪的灵魂得到安宁。他的勇气将会揭示庄园的过去，同时也可能让他发现一些关于自己的意外真相。 2. 游戏内容 3. 核心机制 演示视频 潜行与躲藏： 玩家需要运用潜行技巧，避开石像的激光扫射和鬼的探测。 在废弃的城堡大厅中，玩家可以利用环境中的柱子、家具和墙壁来隐藏自己，避免被敌人发现。 观察和计划： 玩家需要仔细观察石像的激光运动模式和鬼的探测范围，制定穿越计划。 在探索过程中，玩家可以找到提示和线索，帮助解谜和规避危险。 时机把握： 石像的激光和鬼的探测都有特定的时机，玩家需要巧妙选择合适的时机穿越。 在大厅中找到安全区域的最佳时机，避免被追击的鬼所捕捉。 灵活的移动与快速反应： 玩家可以利用游戏中的灵活移动机制，躲过激光，躲避追逐的鬼。 快速反应和迅速改变行动计划是成功穿越的关键。 解谜与故事发现： 大厅中布满了谜题和隐藏的机关，玩家需要解谜以进一步深入城堡。 解开谜题可能会揭示庄园的过去和关于失踪家族的秘密。 安全区域的抵达： 游戏的终极目标是成功抵达大厅中的安全区域，解除家族的诅咒。 到达安全区域后，玩家完成关卡，可能解锁下一个章节，同时可能获得游戏内奖励。 4. 基本组件 MyAnimator 动画控制器 Prefabs 预制体 Scenes 场景 Scripts C#脚本 Sprite 精灵（图片） Art 场景美术 Shaders 渲染器 5.设计和编码PlayerMovement的Coding，其中包括角色移动，旋转过渡，动画挂载，刚体旋转等内容。 "},{"title":"MyLeetCode Note","date":"2024-01-10T11:40:56.000Z","url":"/2024/01/10/MyLeetCode%20Note/","tags":[["Golang","/tags/Golang/"]],"categories":[["Golang","/categories/Golang/"]],"content":"MyLeetCode Note[TOC] 第一章 数据结构知识1.单链表结构 2.栈结构 第二章 算法专题1.滑动窗口核心：左右指针+hashMap，提升嵌套循环问题执行效率。 2.二分查找核心：左右指针+对半删除条件 3.动态规划核心：状态转移方程+memory数组 步骤： 设计状态 写出状态转移方程 设定初始状态 执行状态转移 返回最终解 4.双指针法核心：左右指针（双指针法的一种），提高双循环效率， 变种：快慢指针，对撞指针，单指针法 双指针法变种3（单指针法）： 适用于：简化rk右指针仅仅作为循环遍历的情况 5.回溯算法核心：纯暴力搜索，解决嵌套循环层数的问题，四皇后问题，组合问题 6.dfs回溯算法核心：暴力搜索，解决组合问题 区别：回溯算法，存在剪枝问题，需要通过左右index来判断不同的条件，其余部分与回溯算法一致 第三章 题型模板1.整数反转适用于：数字反转，回文数字，数位问题等 2.特殊符号转换适用于：转换、编码 3.链表反转适用于： 第四章 Leetcode题解 1.twoSum题目给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出和为目标值 target的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 示例 题目大意数组内寻找两数之和等于目标值，返回两者下标。 解题思路顺序扫描数组，如果在字典中找到相加等于target的数，直接返回二者下标，没有找到就将这个数和下标记录在字典中。 代码 小结查找类题型，可用空间换时间增加执行速率。一次for循环，时间复杂度为O(n)。 2.addTowNumbers题目给你两个非空的链表，表示两个非负的整数。他们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字0之外，这两个数都不会以0开头。 示例 题目大意链表逆序相加，返回表头，注意进位 解题思路链表需要先引入头结点head和指针cur，然后顺序读取两个链表中的数据，数据不足用0补齐，直到两个链表都没有数据，处理最后一位的进位。 代码 小结链表类题型。一次for循环，时间复杂度为O(n)。 3.lengthOfLongestSubstring题目给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 示例 题目大意字符串找不重复的 最长子串 的长度 解题思路使用滑动窗口，可以优化嵌套循环问题。第一步判断右指针所指内容是否存在于hash表中，存在则删除所有右指针所指元素。第二步记录右指针所指元素。第三步计算最大长度。重复上面过程直至右指针到达数组最大长度 代码 小结查找类题型，考察滑动窗口。左指针和右指针分别会遍历整个字符串一次，所以时间复杂度为O(n)。 4.findMedianSortedArrays题目给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 算法的时间复杂度应该为 O(log (m+n)) 。 示例 题目大意两正序数组找中位数，由于时间复杂度是O(log (m+n))可能为二分查找 解题思路 先解决和为奇数个中位数是midIndex ,和为偶数个中位数是中间两数的平均数 再用二分法查找中位数，建立两个指针，循环退出条件是k为1即找到最后一个数字 处理边界条件即两数组过界问题 代码 小结查找类题型，考察二分查找的代码。 5.longestPalindrome题目给你一个字符串 s，找到 s 中最长的回文子串。 如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。 示例 题目大意字符串 s找到最长的回文子串 解题思路 扩大窗口，如果有相同元素则必互为互文，直接扩大即可 拿着当前的lk那个元素，使用中心扩散法，找到回文数的边界 记录最大符合条件的回文数 重置rk,lk至此回文数中心点，并后移一位开始重新搜索 代码 小结搜索类题型，考察滑动窗口和中心扩散法的联合使用。 6.ZigZag Conversion题目将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。 比如输入字符串为 &quot;PAYPALISHIRING&quot; 行数为 3 时，排列如下： 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;PAHNAPLSIIGYIR&quot;。 请你实现这个将字符串进行指定行数变换的函数： 示例 题目大意字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。 解题思路 如果把Z字变换按照填入顺序进行连线，这是一个向下每次一步，到numRows时再反向向上每次一步的运动轨迹 根据这个逻辑规律可以将其抽象成带方向的step 创建一个数组存储numRows个字符串，先用初始值&quot;&quot;来填充 用step和rowNum控制循环向同行字符串添加元素 复原字符串 代码 小结二维数组类型题目，也可以根据逻辑原理进行一维简化。 7.Reverse Integer题目给你一个32位的有符号整数x，返回将x中的数字部分反转后的结果。 如果反转后整数超过32位的有符号整数的范围[$-2^{31}$,$2^{31}-1$]，就返回0 示例 题目大意整数反转和Int32最大限制 解题思路 整数反转，使用经典方法一位一位取，倒着放回去就行 int32限制可以用math自带的包，也可以用位运算的方法实现 代码 小结数字处理类题型，要对数位敏感，并且多训练一些位运算对后续有很大的帮助。 8.String to Integer (atoi)题目请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C&#x2F;C++ 中的 atoi 函数）。 函数 myAtoi(string s) 的算法如下： 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，”123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过 32 位有符号整数范围 [−231, 231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。 返回整数作为最终结果。 示例 题目大意实现字符串转数字 解题思路 单循环先排除跳过空格 保存符号 判断当前value是否在字符0到9之间 判断相乘后的数字是否大于int32的边界 数字与符号相乘返回结果 代码 小结标准库实现类题型，涉及较多编程原理的知识。 9.Palindrome Number题目给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 示例 题目大意实现回文整数 解题思路联想到反转整数，回文数在整数中就是反转前和反转后数字相同。 代码 小结整数反转类题型的再应用。 10.Regular Expression Matching题目给你一个字符串s和一个字符规律p，请你来实现一个支持.和*的正则表达式匹配 .匹配任意单个字符 *匹配零个或多个面前的那一个元素 所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。 示例 题目大意简化版本的正则表达式 解题思路 动态规划来实现返回表右下的结果 代码 小结动态规划类题型 11.Container With Most Water题目给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 返回容器可以储存的最大水量 示例 题目大意在数组中找到两个数组成的矩形体积最大，即底*高最大 解题思路我第一想到的双循环的方法，最直观也最好理解，但是执行效率上这道题通不过，所以之后改成了双指针法。 双指针如果都是从左边开始的话，会有一个问题就是高度min(height[lk],height[rk])虽然可能增大，但是距离rk-lk是一定增大了的，所以并不能确定是高度的影响还是距离的影响让面积更大了。所以优化后，双指针改用两边向内的方式，这样距离只会越来越小，高度增大才有可能导致面积增大，才有可能成为最大的面积，排除了距离产生的影响 代码 小结双指针类型题目，根据题目要求做出变化，不是都从左边开始，而是一个从左一个从右进行收敛， 12.Integer To Roman题目罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给你一个整数，将其转为罗马数字。 示例 题目大意整数转罗马字母，题目其余部分主要在讲解罗马转换的规则。 解题思路 我最初想到的是字典，但是如果是查询的话，要人为从低位开始并且要处理退位问题。既然是高位优先，那不妨建一个转换表。这里我就使用结构体来完成 第一个for循环从转换表中取数，来满足高位匹配的要求 第二个for循环来满足从转换表中所取的数尽除，因为循环过去就不会再返回 用result记录结果，记得对num做处理 代码 小结数位类型题目，从高位开始贪心匹配，可以建立结构体对转换方式做标注。 13.Roman To Integer题目罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个罗马数字，将其转换成整数 示例 题目大意罗马字母转整数，题目其余部分主要在讲解罗马转换的规则。 解题思路 需要考虑两个字母的特殊情况，查询字典中是否存在这种结果，存在则加上这个数值并且跳过这两个字母 代码 小结字典查询取值题型，需要重点关注单双字符重叠的问题。 14.Longest Common Prefix题目编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 &quot;&quot; 示例 题目大意查找字符串数组中的最长公共前缀 解题思路 用prefix前缀和每个字符串逐一比较就可以了 代码 小结简单查询记录问题，用滑动窗口有点大材小用了，直接用指针和切片即可。 15.3sum题目给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请 你返回所有和为 0 且不重复的三元组。 注意：答案中不可以包含重复的三元组。 示例 题目大意整数数组 nums查找满足nums[i] + nums[j] + nums[k] == 0的三个数，并且ijk不相等。 解题思路首先想到的是三循环，但是明显超时，后想到用双指针法能够优化循环嵌套问题 为了避免重复利用内置库sort对数组进行排序，因为只需要输出数组中的内容而不需要序号 i作为驱动器，从左到右，lk,rk两个指针分别从i+1和数组末尾开始 重复问题需要特殊处理所以有三个类似i和i+1的比较都是为了去重 如果lk走到rk就是所有都比较完整，如果还没有lk必须走完，比较多种不同的组合 代码 小结基于i驱动的双指针法，更多类似解决三个变量运算的问题。 16.3sum Closest题目给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。 返回这三个数的和。 假定每组输入只存在恰好一个解。 示例 题目大意给一个整数数组 nums和 一个目标值 target，求target最接近的三个数的和返回和的值。 解题思路 与上一题大致相同的框架，使用的是对撞指针的做法，定位i，再去研究合适的左指针lk和右指针rk 这里有个额外的要求就是需要比较result和total哪个离target最近，这个最近可以是两个方向的所以要取绝对值- 还有可以优化的地方就是对排序后数组中的重复数字可以进行跳过，这里对i,lk和rk都需要进行- 还有一步优化就是找到和target直接相等的可以直接跳出返回target(要是抠逻辑细节的话应该返回total，因为这个数字是在数组中找到的) 代码 小结基于i驱动的双指针法，又名对撞指针法，是第15道题目的拓展运用。需要首先理解第15题，再来完成第16题会更好。 17.Letter Combinations Of A Phone Number题目给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母 示例 题目大意手机键盘根据输入返回字母组合的所有可能性 解题思路 所有可能性，考虑暴力破解，回溯算法。递归可以解决循环次数不确定问题 建立对应字符字典letterMap 编写回溯算法backTracking的标准格式(退出条件+回溯+撤销)，需要传入原始值digits和序数index 代码 小结回溯算法题型。第一次遇见回溯算法，需要认真搞清回溯算法的每一步，回溯算法具有固定格式需要重点熟记。后续还会遇到很多类似的题目。 18.4sum题目给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复） 示例 题目大意给一个整数数组 nums ，和一个目标值 target 。找出不重复的四元组 [nums[a], nums[b], nums[c], nums[d]]的所有组合 解题思路 类比三数之和，采用对撞指针加上双循环的方式 首先需要对数组进行排序 为了避免重复i取0,j取i+1,lk取j+1,rk取len(nums)-1也就是说在i,j不变的情况下找到合适的lk和rk 最后加上优化部分，避免重复操作 代码 小结基于i,j驱动的对撞指针方法，整体时间复杂度较高，需要考虑优化问题。 19.Remove Nth Node From End Of List题目给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。 示例 题目大意链表倒删结点。 解题思路 双指针法中的变种快慢指针的思想，这里就统一用左右指针代替快慢指针来表达 右指针先走n位后，左右指针同时走完，这样间距正好是n位 操作左指针处理删除过程，返回head即可 代码 小结双指针法在链表题型上的运用。 20.Valid Parentheses题目给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串 s ，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 每个右括号都有一个对应的相同类型的左括号 示例 题目大意判断括号是否有效 解题思路 经典思路使用栈的FIFO先进先出策略，必须有一对消除才能继续 代码 小结有效性判断类型题目，对栈结构需要熟练掌握加以运用。 21.Merge Two Sorted Lists题目将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例 题目大意两个升序链表合并为一个新的升序链表 解题思路 引入哨兵节点，避免头结点需要单独处理的问题 循环读取链表直至有一个链表中没有节点 拼接另一个链表 返回哨兵节点后的第一个节点作为头结点 代码 小结链表类型题目，学习引入哨兵节点的技巧，着重掌握链表的添加，移动的代码实现。 22.Generate Parentheses题目数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 示例 题目大意输入n返回n对括号的所有有效组合 解题思路 每个选项只有左右括号两种选择情况，可以采用深度优先二叉搜索树的方式 用dfs回溯算法构建二叉搜索树lindex,rindex为树的左右枝 path为符合条件的字符串，res为结果集 代码 小结求所有潜在组合的类型，可以采用回溯算法来实现，也可以借此机会深入了解顺序结构下的二叉搜索树。 23.Merge K Sorted Lists题目给你一个链表数组，每个链表都已经按升序排列。 请你将所有链表合并到一个升序链表中，返回合并后的链表。 示例 题目大意解题思路代码 小结最小堆实现代码，也可以参考在21题中已经实现的两个链表合并的方法使用分治的方法，递归解决k个的问题。 24.Swap Nodes In Pairs题目给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。 示例 题目大意链表两两交换 解题思路 本质上考察的是链表交换的基本技巧 标准解法需要用到四个结点（0,1,2,3）和两个临时变量来保存node1和node3 将0连接到2实现交换的第一步 将2连接到1实现交换的第二步 将1连接到3实现交换的第三步 记得cur要往后走两格，走到下一个4节点的起点也就是2这里 代码 小结链表类题型，考察链表的基本功。注意全程用cur自身去完成，如果给cur赋值&amp;ListNode会使最后返回的head和cur指向不一致，引发错误。 25.Reverse Nodes In K Group题目给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。 k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。 示例 题目大意链表k个为一组，进行组内交换 解题思路 统计链表长度，计算k的有几段 建立哨兵节点 p0为表头，pre为反转链表的表头，cur为当前链表指向，nxt为断开链表连接线时保存的内容 外层循环执行n%k次反转，内层循环对k个节点内的节点进行依次反转 重新连接链表，执行外层循环 代码 小结链表反转类题型，属于较难的，要非常明确在图中线的变化，以及重连后的链表，反复思考加深印象。 26.Remove Duplicates From Sorted Array题目给你一个 非严格递增排列 的数组 nums ，请你原地删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。 考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过： 更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。 返回 k 。 示例 题目大意递增数组 nums ，原地删除重复出现的元素，返回删除后数组的新长度。 解题思路 原地删除考虑使用双指针法 快（右）指针找寻不同值，慢（左）指针定在需要修改的值前面 代码 小结双指针类型题目，注意题目要求的原地修改条件。 27.Remove Eement题目给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地修改输入数组。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素 示例 题目大意给你数组 nums 和值 val， 原地删除所有数值等于 val 的元素，返回新长度。 解题思路 双指针法，但是这里的右指针仅仅起到循环遍历的作用所以可以优化为单指针法 单指针保留左指针，用for range替代右指针，在循环体中处理核心逻辑 代码 小结双指针类型题目，与26题很类似，着重注意修改循环体的题目逻辑即可，双指针法直接套用结构就行。 28.Find The Index Of The First Occurrence In A String题目给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回 -1 。 示例 题目大意给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回 -1 。 解题思路 很经典的KMP算法的实际运用，如果用暴力破解需要用到双循环，但是每次循环遍历读到的内容没有被充分复用导致，一段内容多次读取识别的问题，KMP算法就能很好的解决这个问题。 代码 小结本题虽然是个简单题，但是可以借用这个机会学习KMP这个经典算法。暂时不会写也不要紧，只要能理解学会引用KMP模板即可。 格式X.XXX题目示例 题目大意解题思路代码 小结"},{"title":"Hexo基本指令","date":"2023-12-29T12:30:56.000Z","url":"/2023/12/29/Hexo%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/","tags":[["Encyclopaedia","/tags/Encyclopaedia/"]],"categories":[["Encyclopaedia","/categories/Encyclopaedia/"]],"content":"Hexo基本指令1.介绍Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上。因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。 2.基本指令介绍 指令 作用 简写 参数 hexo clean 清除缓存 hexo generate 生成 hexo g hexo deploy 部署到远端 hexo d hexo server 启动服务预览 hexo s hexo s -p 5000：更改端口hexo s -i 192.168.1.1自定义IPhexo s -s 静态模式 hexo init 初始化博客 hexo new “我的博客” 新建文章 hexo n “我的博客 npm update hexo -g 升级 3.创建Hexo博客步骤 在github上创建仓库github用户名. 搭建git与github的ssh 安装nodejs 安装hexo 创建文件夹在其中 在文件夹中初始化博客项目 关联github项目 安装Hexo的Git部署插件 部署到远端 4.目录在项目的._config.yml文件中Directory对应参数的解释 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹，source_dir 下的子目录 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。 5.国际化（i18n）若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 _config.yml 中调整 language 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。 语言文件 语言文件可以使用 YAML 或 JSON 编写，并放在主题文件夹中的 languages 文件夹。您可以在语言文件中使用 printf 格式。 路径 您可在 front-matter 中指定该页面的语言，也可在 _config.yml 中修改 i18n_dir 设定，让 Hexo 自动侦测。 i18n_dir 的预设值是 :lang，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说： 捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二 /archives/index.html 中的 archives 就不被当成是语言。 疑问：1.Hexo对于标签tag的定义是什么？和分类之间有什么关系 2.skip_render不渲染是指Markdown文件不渲染吗？ 3.Hexo只支持markdown的文件吗？ 4.如何修改网站图标icon"},{"title":"LaTeX语法","date":"2023-12-20T11:40:56.000Z","url":"/2023/12/20/LaTeX%E8%AF%AD%E6%B3%95/","tags":[["Encyclopaedia","/tags/Encyclopaedia/"]],"categories":[["Encyclopaedia","/categories/Encyclopaedia/"]],"content":"LaTeX语法1.论文排版常用语句 2.字体 3.公式 提示：上下标$3x^{22}还有a_{11}$需要添加{}，3x^&#123;22&#125;和a_&#123;11&#125; 组合数表示法$\\mathbf{C^{22}_{11}}$可以通过\\mathbf&#123;C^&#123;22&#125;_&#123;11&#125;&#125; 4.特殊符号符号前需要加上转义符号\\ $\\div$ \\div $\\times$ \\times $\\approx$ \\approx $\\cdot$ \\cdot $\\neq$ \\neq $\\gt$ \\gt $\\geq$ \\geq $\\leq$ \\leq $\\lt$ \\lt $\\pm$ \\pm $\\pi$ \\pi $\\infty$ \\infty $\\geqslant$ \\geqslant $\\quad$ \\quad $\\LaTeX$ \\LaTeX $#$ \\# $%$ \\% $$$ \\$ $\\triangle$ \\triangle $\\bigcirc$ \\bigcirc $\\theta$ \\theta $\\overbrace{1+2+\\cdots+100}$ \\overbrace&#123;1+2+\\cdots+100&#125; $\\because$ \\because $\\therefore$ \\therefore $\\overbrace{a+b+c}^{n}$ \\overbrace&#123;a+b+c&#125;^&#123;n&#125; $\\alpha$ \\alpha $\\beta$ \\beta $\\ce{CO2 + C -&gt; 2 CO}$ \\ce&#123;CO2 + C -&gt; 2 CO&#125; $\\ce{h2o}$ \\ce&#123;h2o&#125; 5.排版 放大缩小 $\\frac{2}{3}$ 默认 $\\large{\\frac{2}{3}}$ \\large $\\Large{\\frac{2}{3}}$ \\Large $\\huge{\\frac{2}{3}}$ \\huge $\\Huge{\\frac{2}{3}}$ \\Huge 6.方程组 方程组写法 $$\\begin{cases}2x-y&amp;&#x3D;5\\3x+4y&amp;&#x3D;2\\end{cases}$$ 列式计算写法 $$\\begin{align}&amp;am+an+bm+bn\\&#x3D;&amp;a(m+n)+b(m+n)\\&#x3D;&amp;(m+n)(a+b)\\end{align}$$ 带编号的公式 7.表格 普通表格（居中使用嵌套\\begin&#123;center&#125;） 三线表 8.列表 9.图片 插入图片 图片排版（四宫格） 10.矩阵 $$a &#x3D; \\left(\\matrix{ \\alpha_1 &amp; test1\\ \\alpha_2 &amp; test2}\\right)$$ 也可以使用matrix,小括号矩阵pmatrix,方括号矩阵bmatrix,中括号矩阵Bmatrix,单竖线矩阵vmatrix,双竖线矩阵Vmatrix $$\\begin{matrix} 0 &amp; 1 \\ 1 &amp; 0\\end{matrix}\\qquad\\begin{pmatrix} 0 &amp; 1 \\ 1 &amp; 0\\end{pmatrix}\\qquad\\begin{bmatrix} 0 &amp; 1 \\ 1 &amp; 0\\end{bmatrix}\\qquad\\begin{Bmatrix} 0 &amp; 1 \\ 1 &amp; 0\\end{Bmatrix}\\qquad\\begin{vmatrix} 0 &amp; 1 \\ 1 &amp; 0\\end{vmatrix}\\qquad\\begin{Vmatrix} 0 &amp; 1 \\ 1 &amp; 0\\end{Vmatrix}$$ 多项矩阵，斜点$$\\begin{pmatrix}a_{11} &amp; a_{12} &amp; \\dots &amp; a_{1n} \\a_{21} &amp; a_{22} &amp; \\dots &amp; a_{2n} \\\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\a_{n1} &amp; a_{n2} &amp; \\dots &amp; a_{nn} \\\\end{pmatrix}$$ 分块矩阵$$\\begin{pmatrix}\\begin{matrix}1 &amp; 0 \\0 &amp; 1 \\\\end{matrix} &amp; \\Large 0 \\ \\Large 0 &amp; \\begin{matrix}1 &amp; 0 \\0 &amp; 1 \\\\end{matrix}\\end{pmatrix}$$ 三角矩阵$$\\begin{pmatrix}a_{11} &amp; a_{12} &amp; \\dots &amp; a_{1n} \\&amp; a_{22} &amp; \\cdots &amp; a_{2n} \\&amp; &amp; \\ddots &amp; \\vdots \\&amp; &amp; &amp; a_{nn}\\end{pmatrix}$$ 98.论文排版 疑问1.图片存放在哪里才能索引到 99.参考网站 LaTeX语法（） 表格生成网站： 拍照公式网站： "},{"title":"matlab语法","date":"2023-12-19T03:43:56.000Z","url":"/2023/12/19/matlab%E8%AF%AD%E6%B3%95/","tags":[["Encyclopaedia","/tags/Encyclopaedia/"]],"categories":[["Encyclopaedia","/categories/Encyclopaedia/"]],"content":"matlab语法1.数据类型 2.矩阵操作 3.逻辑与流程控制 4.基本绘图操作 5.图形的保存与导出 6.补充内容 7.清空环境变量及命令 LaTeX语法（） "},{"title":"Hello World","date":"2023-12-16T01:40:56.000Z","url":"/2023/12/16/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]